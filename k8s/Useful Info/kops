Prepare AWS for Kops
****** Installing Kops *******
MacOS:
Install using HomeBrew1. brew update && brew install kops
2. curl -Lo kops https://github.com/kubernetes/kops/releases/
download/$(curl -s https://api.github.com/repos/kubernetes/kops/
releases/latest | grep tag_name | cut -d '"' -f 4)/kops-darwin-amd64
3. chmod +x ./kops
4. sudo mv ./kops /usr/local/bin/
Linux Machine:
1. curl -Lo kops https://github.com/kubernetes/kops/releases/
download/$(curl -s https://api.github.com/repos/kubernetes/kops/
releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
2. chmod +x ./kops
3. sudo mv ./kops /usr/local/bin/
****** Installing Other Dependencies(KubeCtl) *******
MacOS:
Install using HomeBrew1. brew install kubernetes-cli
2. curl -Lo kubectl https://storage.googleapis.com/kubernetesrelease/release/$(curl -s https://storage.googleapis.com/kubernetesrelease/release/stable.txt)/bin/darwin/amd64/kubectl
3. chmod +x ./kubectl
4. sudo mv ./kubectl /usr/local/bin/kubectl
Linux Machine:
1. curl -Lo kubectl https://storage.googleapis.com/kubernetesrelease/release/$(curl -s https://storage.googleapis.com/kubernetesrelease/release/stable.txt)/bin/linux/amd64/kubectl
2. chmod +x ./kubectl
3. sudo mv ./kubectl /usr/local/bin/kubectl
****** Download Python PIP *******
MacOS:
1. brew install python
2. curl -O http://python-distribute.org/distribute_setup.py
3. python distribute_setup.py
4. curl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.py
5. python get-pip.py
(If you get Permission Error, add sudo before command)
Linux Machine:
1. sudo apt-get install python-pip
****** Installing AWS CLI *******
MacOS:
brew update && brew install awscli
Linux Machine:
pip install awscli



_____________________________________________________



SetUp Kubernetes Cluster on AWS with Kops
1. Generate SSH Key
ssh-keygen -f .ssh/id_rsa
2. Rename kops-linux-amd64 to kops for user easy.
sudo mv /usr/local/bin/kops-linux-amd64 /usr/local/bin/kops
******* Create Cluster ********
Command if you are using your Domain Name:
kops create cluster --yes --state=<s3://<Define S3 Bucket Name>> --
zones=<One or more Zones> --node-count=<Number of Nodes> --nodesize=<Define Machine Size> --master-size=<Master Node Size>
--name=<Define DNS Name>
Like :
kops create cluster --yes --state=s3://kops-storage-b345987 --
zones=ap-south-1a,ap-southeast-1b,ap-southeast-2c --node-count=2 --
node-size=t2.micro --master-size=t2.micro --name=test.easybix.com
For Non DNS Base Cluster, work with .k8s.local
kops create cluster --yes --state=s3://kops-storage-b345987 --
zones=ap-south-1a,ap-southeast-1b,ap-southeast-2c --node-count=2 --
node-size=t2.micro --master-size=t2.micro --name=test.k8s.local
4. Verify Node Status
kubectl get node
5. Validate Cluster
kops validate cluster
6. Letâ€™s create a Kubernetes Deployment using an existing image
named echoserver, which is a simple HTTP server and expose it on
port 8080 using --port.
kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --
port=8080
7. In order to access the hello-minikube service, we must first
expose the deployment to an external IP via the command:
kubectl expose deployment hello-minikube --type=NodePort
8. Check if the service was exposed
kubectl get services
9. Modify Security Group Of Nodes to access the Service
10. Delete Kubernetes Cluster form AWS
kops delete cluster --name ${NAME} --yes
kops delete cluster --name test.k8s.local --yes
