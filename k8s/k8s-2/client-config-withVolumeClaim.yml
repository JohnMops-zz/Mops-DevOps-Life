apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      component: web
  template:
    metadata:
      labels:
        component: web
    spec:
      volumes:
        - name: jenkins-storage
          persistentColumeClaim:
            claimName: jenkins-volume-claim #name of the claim if the configs are seperate
      containers:
        - name: client
          image: johnmops/jen-ansible:1.0
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: jenkins-storage #go back to the spec section and find the storage 
              mounPath: /var/jenkins_home #mount inside the container
              subPath: jenkins this option will create a folder named jenkins inside the designated storage
---

#Connects the internal pods without access from the outside world - clusterIP
apiVersion: v1
kind: Service
metadata:
  name: client-cluster
spec:
  type: ClusterIP
  selector:
    component: web
  ports:
    - port: 3000 #can be different
      targetPort: 3000

---

apiVersion: v1
kind: Service
metadata:
  name: client-node-port
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 8080
      nodePort: 31515
  selector:
    component: web

---

apiVersion: v1
kind: PersistentVolumeClaim #Not an actual volume but a claim that is going to be attached to a pod configuration
metadata:
  name: jenkins-volume-claim
spec:
  accessModes: #a slice of a storage needs that meets those terms, has: ReadWriteOnce, ReadOnlyMany, ReadWriteMany referring to nodes access
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

#The pod config will ask for a already provisioned volume or for a dynamically provisioned one if the first does not exist
